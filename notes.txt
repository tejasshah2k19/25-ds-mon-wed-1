DS -> data structure --> 

DS : concept  
DSA 

C C++ Java Python 

PL -> 

	search => logic 
	array  => logic 

	prog  => 5 data item  => search => information 

	single user ->  

	server live -> www.aaa.com => 
				search : Mango 
				output : 5KB -> 2kb
				          1second -----> slow  

	1000 User : 5000kb : 5MB
	10000 user : 50,000 kb : 50MB

	7:23 -> 10000req -> 
	signup-->
	login
	home
	add request
	accept 
	view profile 
	like / comment 
	

	USERS*10*50 500MB
	
	SERVER 2 4 8 16 32 64 128 .. . . . .. . . . 
	

	Swiggy -> 60CR -> Amazon -> Server 
	Facebook ->  india china

	60CR ---- 30CR

	facebook ->
	6000CR 3000CR  :3000CR


	DS: concept :  
	1) space complexity -> memory --> server farm 
	2) time complexity  -> cycle : iteration : instructions 

	ahd baroda -> 110KM
		      100KM

		fer ---> 1
		Maruti ->80-100 1.30
		merc -> 100 1.05
 


	big -> fail -> 

	25000 -> 25CR -> crash 


Harsh --> covid -> 1 -> age -> immu -> vac -> 90 days ->
	
area wise , city, state , country -> 

	sola rd ->  20000 , , , -> 
	
	5000->user -> 90days -> hang 
	
	15days -> 
	22days ->
	60 days -> 0 case 

------------------------------------------------------------------------

DS -->
	ARRAY 
	STACK
	QUEUE 
	LinkedList 
	Tree
	Graph 
	search 
	sorting 

	10 num -> sort -> 
			quick 
-------------------------------------------------------------------	
DS -> coding -> STACK QUEUE GRAPH -> self -> time -> instruction -> customize-> 
-------------------------------------------------------------------
pistol -> assembl -> 

-----------------------------------------------------------------------

				DS 
		Linear 				NoN Linear 
	Array					Tree
	Stack					Graph 
	Queue					
	LinkedList 

	Sorting: bubble , selection , insertion , merge , quick 
	Searching : linear , binary 
	
----------------------------------------------------------------------


Linear Data structure -> 
							array -> 


function ---> 
array    --->



scanArray(); 10 20 335 62 54 
printArray();10 20 335 62 54 
maxArray();  335 
primeArray();-1 

xxxxx()-> 


----------------------------------------------------------------


array ---> n number data items -> same type of data type -> continu mem allocation. 


5 numbers -> find max 

int a,b,c,d,e;

int a[5];// byte -> 20 byte {5*4}

int x; //byte -> 2 | 4 


types of array ?
one dimension -> single n time 
two dimension -> matrix 
3-4-5 Multidimension 
---------------------------------------------------------------------------------------------------------------

int a[500];
num: 30 ->  
470:W 
---------------------------------------------------------------------------------------------------------------

function -> collection of instructions , line by line , expected output 

add():
	read a
	read b 
	c = a+b
	print(c)




add() //call 


add() //


function -> create , use 


returnType 	functionName	argument/parameter 
void 		main			()


void -> no return 
()  -> no argument 

void add(int,int);//no return , with argument 

int add(int,int);//return , argument 

---------------------------------------------------------------------------------------------




#include
	void add();//declare
main(){
	add();//call 
}
	//define 
	void add(){
		//logic  
	}



#include 

//declare & define
void add(){

}

main(){
	add();//call 
}



---------------------------------------------------------------------------------------------



array -> insertion order --> index -> location -> 

40 
30
20
10

40 30 20 10 

stack ---> Last In First Out --> LiFo 

Order History : Call History 
WhatsApp : Gmail 
Gallery 


a+b-c*d => expression => stack 
recursion ==> stack 
circuitSwitching ==> 


------------------------------------------------------------------------------------------------------


Sorting :- 

input=>	23,45,67,89,87,65,43
sort 
output=> 23 43 45 65 67 87 89 


bubble sort --> 


	23,45,67,89,87,65,43
	 
pass 1: 
	23,45,67,89,87,65,43
	23,45,67,89,87,65,43
	23,45,67,89,87,65,43
	23,45,67,87,89,65,43
	23,45,67,87,65,89,43
	23,45,67,87,65,43,89
	 
pass 2: 
	23,45,67,87,65,43,89
	23,45,67,87,65,43,89
	23,45,67,87,65,43,89
	23,45,67,65,87,43,89
	23,45,67,65,43,87,89

pass 3:
	23,45,67,65,43,87,89
	23,45,67,65,43,87,89
	23,45,65,67,43,87,89
	23,45,65,43,67,87,89

pass 4:
	23,45,65,43,67,87,89
	23,45,65,43,67,87,89
	23,45,43,65,67,87,89

	
pass 5

pass 6 : SORT 

---------------------------------------------------------
selection sort:- 

input  : 34,56,78,98,76,5

---------------------------------------------------------
time complexity of bubble sort ?


 


23,45,67,89,87,65,43

			tmp=43 
23,43,45,65,67,87,89 
j


---------------------------------------------------------
recursion --> 


	void add(){

		sub(); //nesting ---> function calling another function 
	}

	void sub(){

			sub(); // function calling itself 
			//recursion -> function calling itself 
	}


---------------------------------------------------------

mulTable -> argument -> num -> 5	

5 * 1 = 5 
5 * 2 = 10
5 * 10 = 50 

mulTable(num,end); 
---------------------------------------------------------

fact(5) => 

printf(" %d ",fact(5));//120  //5*4*3*2*1 => 120 

 
---------------------------------------------------------
a[] ={1,2,3,4,5}
printf(" %d ", sumOfArray(a,x,x));//15 
---------------------------------------------------------



{ 

int a; // 2 byte 
int x[20];//5 :15   //25 -5 

//
//
//
//

}

stdlib.h 

DMA
	allocate :2 
	release  :1 


	calloc()
	malloc()
	realloc()
	free() 

int a;//4 byte 
int a[20];// 4 byte 20 block  
	
	calloc() // ->same size n number block  

	malloc() //single block -> 


--------------------------------------------------------

1. Add Student 
2. List Student 
3. Search 
0. exit 


1
enter name and rollnum
ram
123


1. Add Student 
2. List Student 
3. Search 
0. exit 

1
enter name and rollnum
ravan
321


1. Add Student 
2. List Student 
3. Search 
0. exit 

2
ram			123	
ravan		321 
--------------------------------------------------------------------------

